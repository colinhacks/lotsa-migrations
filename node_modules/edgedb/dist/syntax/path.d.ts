import { ObjectTypeSet, TypeSet, Expression } from "../reflection";
import { PathParent, $expr_PathLeaf, $expr_PathNode, $pathify, ExpressionRoot } from "../reflection/path";
declare function _$expr_PathLeaf<Root extends TypeSet, Parent extends PathParent, Exclusive extends boolean = boolean>(root: Root, parent: Parent, exclusive: Exclusive): $expr_PathLeaf<Root, Parent, Exclusive>;
declare function _$expr_PathNode<Root extends ObjectTypeSet, Parent extends PathParent | null, Exclusive extends boolean = boolean>(root: Root, parent: Parent, exclusive: Exclusive): $expr_PathNode<Root, Parent, Exclusive>;
declare function _$pathify<Root extends TypeSet, Parent extends PathParent>(_root: Root): $pathify<Root, Parent>;
export declare function $expressionify<T extends ExpressionRoot>(_expr: T): Expression<T>;
export { _$pathify as $pathify, _$expr_PathLeaf as $expr_PathLeaf, _$expr_PathNode as $expr_PathNode, };

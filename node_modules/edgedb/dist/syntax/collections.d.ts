import { $expr_Array, $expr_NamedTuple, $expr_Tuple, ArrayType, BaseType, cardinalityUtil, NamedTupleLiteralShape, NamedTupleShape, NamedTupleType, NonArrayType, TupleType, TypeSet, typeutil } from "../reflection";
import { getCardsFromExprs, getPrimitiveBaseType } from "./set";
export declare function array<Element extends NonArrayType>(element: Element): ArrayType<Element>;
export declare function array<Expr extends TypeSet<NonArrayType>, Exprs extends TypeSet<getPrimitiveBaseType<Expr["__element__"]>>[]>(arg: [Expr, ...Exprs]): $expr_Array<ArrayType<Expr["__element__"]>, cardinalityUtil.multiplyCardinalitiesVariadic<getCardsFromExprs<[Expr, ...Exprs]>>>;
export declare function tuple<Items extends typeutil.tupleOf<BaseType>>(items: Items): TupleType<Items>;
export declare function tuple<Item extends TypeSet, Items extends typeutil.tupleOf<Item>>(items: Items): $expr_Tuple<Items>;
export declare function namedTuple<Shape extends NamedTupleShape>(shape: Shape): NamedTupleType<Shape>;
export declare function namedTuple<Shape extends NamedTupleLiteralShape>(shape: Shape): $expr_NamedTuple<Shape>;
export type { ArrayType as $Array, NamedTupleType as $NamedTuple, TupleType as $Tuple, } from "../reflection";

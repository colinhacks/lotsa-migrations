import { ExpressionKind, Cardinality, } from "../reflection";
import { $expressionify } from "./path";
import { $queryify } from "./query";
export function optional(type) {
    return {
        __kind__: ExpressionKind.OptionalParam,
        __type__: type,
    };
}
export function withParams(params, expr) {
    const paramExprs = {};
    for (const [key, param] of Object.entries(params)) {
        paramExprs[key] = $expressionify({
            __kind__: ExpressionKind.Param,
            __element__: param.__kind__ === ExpressionKind.OptionalParam
                ? param.__type__
                : param,
            __cardinality__: param.__kind__ === ExpressionKind.OptionalParam
                ? Cardinality.AtMostOne
                : Cardinality.One,
            __name__: key,
        });
    }
    const returnExpr = expr(paramExprs);
    return $expressionify($queryify({
        __kind__: ExpressionKind.WithParams,
        __element__: returnExpr.__element__,
        __cardinality__: returnExpr.__cardinality__,
        __expr__: returnExpr,
    }));
}

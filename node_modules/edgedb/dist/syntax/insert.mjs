import { Cardinality, ExpressionKind, } from "../reflection";
import { $expressionify } from "./path";
import { $queryify } from "./query";
function unlessConflict(conflictGetter) {
    const expr = {
        __kind__: ExpressionKind.InsertUnlessConflict,
        __element__: this.__element__,
        __cardinality__: Cardinality.One,
        __expr__: this,
    };
    if (!conflictGetter) {
        expr.__conflict__ = { on: null };
        return $expressionify($queryify(expr));
    }
    else {
        const scopedExpr = $expressionify({
            ...this.__expr__,
            __cardinality__: Cardinality.One,
        });
        expr.__conflict__ = conflictGetter(scopedExpr);
        return $expressionify($queryify(expr));
    }
}
export function $insertify(expr) {
    expr.unlessConflict = unlessConflict.bind(expr);
    return $queryify(expr);
}
export function insert(root, shape) {
    const expr = {
        __kind__: ExpressionKind.Insert,
        __element__: root.__element__,
        __cardinality__: Cardinality.One,
        __expr__: root,
        __shape__: shape,
    };
    expr.unlessConflict = unlessConflict.bind(expr);
    return $expressionify($insertify(expr));
}

/*!
 * This source file is part of the EdgeDB open source project.
 *
 * Copyright 2019-present MagicStack Inc. and the EdgeDB authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/// <reference types="node" />
import { WriteBuffer } from "./buffer";
import { ICodec } from "./codecs/ifaces";
import { CodecsRegistry } from "./codecs/registry";
import { Address, NormalizedConnectConfig } from "./con_utils";
import { Set } from "./datatypes/set";
import * as errors from "./errors";
import { ALLOW_MODIFICATIONS, BorrowReason, Connection, INNER, OPTIONS, ParseOptions, PrepareMessageHeaders, ProtocolVersion, QueryArgs } from "./ifaces";
import { Options, RetryOptions, SimpleRetryOptions, SimpleTransactionOptions, TransactionOptions } from "./options";
import { Transaction } from "./transaction";
export declare function borrowError(reason: BorrowReason): errors.EdgeDBError;
export declare class StandaloneConnection implements Connection {
    [ALLOW_MODIFICATIONS]: never;
    [INNER]: InnerConnection;
    [OPTIONS]: Options;
    protected initInner(config: NormalizedConnectConfig, registry: CodecsRegistry): void;
    protected shallowClone(): this;
    withTransactionOptions(opt: TransactionOptions | SimpleTransactionOptions): this;
    withRetryOptions(opt: RetryOptions | SimpleRetryOptions): this;
    rawTransaction<T>(action: (transaction: Transaction) => Promise<T>): Promise<T>;
    retryingTransaction: <T>(action: (transaction: Transaction) => Promise<T>) => Promise<T>;
    transaction<T>(action: (transaction: Transaction) => Promise<T>): Promise<T>;
    close(): Promise<void>;
    protected cleanup(): void;
    isClosed(): boolean;
    execute(query: string): Promise<void>;
    query<T = unknown>(query: string, args?: QueryArgs): Promise<T[]>;
    queryJSON(query: string, args?: QueryArgs): Promise<string>;
    querySingle<T = unknown>(query: string, args?: QueryArgs): Promise<T | null>;
    querySingleJSON(query: string, args?: QueryArgs): Promise<string>;
    queryRequiredSingle<T = unknown>(query: string, args?: QueryArgs): Promise<T>;
    queryRequiredSingleJSON(query: string, args?: QueryArgs): Promise<string>;
}
export declare class InnerConnection {
    borrowedFor?: BorrowReason;
    config: NormalizedConnectConfig;
    connection?: ConnectionImpl;
    registry: CodecsRegistry;
    constructor(config: NormalizedConnectConfig, registry: CodecsRegistry);
    getImpl(singleAttempt?: boolean): Promise<ConnectionImpl>;
    get _isClosed(): boolean;
    logConnectionError(...args: any): void;
    reconnect(singleAttempt?: boolean): Promise<ConnectionImpl>;
}
export declare class ConnectionImpl {
    private sock;
    private config;
    private paused;
    private connected;
    private lastStatus;
    private codecsRegistry;
    private queryCodecCache;
    private serverSecret;
    private serverXactStatus;
    private buffer;
    private messageWaiterResolve;
    private messageWaiterReject;
    private connWaiter;
    private connWaiterResolve;
    private connWaiterReject;
    protected protocolVersion: ProtocolVersion;
    private _abortedWith;
    private _waitForMessage;
    private _onConnect;
    private _abortWaiters;
    private _onClose;
    private _onError;
    private _abortWithError;
    private _checkState;
    private _onData;
    private _ignoreHeaders;
    private _parseHeaders;
    private _parseDescribeTypeMessage;
    private _parseCommandCompleteMessage;
    private _parseErrorMessage;
    private _parseSyncMessage;
    private _parseDataMessages;
    private _parseServerSettings;
    private _fallthrough;
    private connect;
    private _authSasl;
    private _ensureMessage;
    protected _parse(query: string, asJson: boolean, expectOne: boolean, alwaysDescribe: boolean, options?: ParseOptions): Promise<[number, ICodec, ICodec, Buffer | null, Buffer | null]>;
    private _encodeArgs;
    protected _executeFlow(args: QueryArgs | Buffer, inCodec: ICodec, outCodec: ICodec, result: Set | WriteBuffer): Promise<void>;
    private _optimisticExecuteFlow;
    private _getQueryCacheKey;
    private _validateFetchCardinality;
    fetch(query: string, args: QueryArgs | undefined, asJson: boolean, expectOne: boolean, requiredOne?: boolean): Promise<any>;
    execute(query: string, allowTransactionCommands?: boolean): Promise<void>;
    resetState(): Promise<void>;
    private _abort;
    isClosed(): boolean;
    close(): Promise<void>;
}
export declare class RawConnection extends ConnectionImpl {
    static connectWithTimeout(addr: Address, config: NormalizedConnectConfig): Promise<RawConnection>;
    rawParse(query: string, headers?: PrepareMessageHeaders): Promise<[Buffer, Buffer, ProtocolVersion]>;
    rawExecute(encodedArgs?: Buffer | null): Promise<Buffer>;
    execute(query: string): Promise<void>;
    query<T = unknown>(query: string, args?: QueryArgs): Promise<T[]>;
    querySingle<T = unknown>(query: string, args?: QueryArgs): Promise<T>;
    queryJSON(query: string, args?: QueryArgs): Promise<string>;
    querySingleJSON(query: string, args?: QueryArgs): Promise<string>;
}

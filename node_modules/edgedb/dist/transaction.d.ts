import { ConnectionImpl, InnerConnection, StandaloneConnection } from "./client";
import { ALLOW_MODIFICATIONS, Connection, Executor, QueryArgs } from "./ifaces";
import { IsolationLevel, TransactionOptions } from "./options";
export declare enum TransactionState {
    NEW = 0,
    STARTED = 1,
    COMMITTED = 2,
    ROLLEDBACK = 3,
    FAILED = 4
}
export declare const START_TRANSACTION_IMPL: unique symbol;
export declare class Transaction implements Executor {
    [ALLOW_MODIFICATIONS]: never;
    _connection: StandaloneConnection;
    _inner?: InnerConnection;
    _impl?: ConnectionImpl;
    _deferrable: boolean;
    _isolation: IsolationLevel;
    _readonly: boolean;
    _state: TransactionState;
    _opInProgress: boolean;
    constructor(connection: Connection, options?: TransactionOptions);
    get state(): TransactionState;
    isActive(): boolean;
    private _checkStateBase;
    private _checkState;
    protected _makeStartQuery(): string;
    protected _makeCommitQuery(): string;
    protected _makeRollbackQuery(): string;
    private _execute;
    start(): Promise<void>;
    [START_TRANSACTION_IMPL](singleConnect?: boolean): Promise<void>;
    commit(): Promise<void>;
    rollback(): Promise<void>;
    private getConn;
    execute(query: string): Promise<void>;
    query<T = unknown>(query: string, args?: QueryArgs): Promise<T[]>;
    queryJSON(query: string, args?: QueryArgs): Promise<string>;
    querySingle<T = unknown>(query: string, args?: QueryArgs): Promise<T | null>;
    querySingleJSON(query: string, args?: QueryArgs): Promise<string>;
    queryRequiredSingle<T = unknown>(query: string, args?: QueryArgs): Promise<T>;
    queryRequiredSingleJSON(query: string, args?: QueryArgs): Promise<string>;
}

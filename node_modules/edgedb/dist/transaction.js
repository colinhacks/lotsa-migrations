"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Transaction = exports.START_TRANSACTION_IMPL = exports.TransactionState = void 0;
const client_1 = require("./client");
const errors = __importStar(require("./errors"));
const ifaces_1 = require("./ifaces");
const options_1 = require("./options");
var TransactionState;
(function (TransactionState) {
    TransactionState[TransactionState["NEW"] = 0] = "NEW";
    TransactionState[TransactionState["STARTED"] = 1] = "STARTED";
    TransactionState[TransactionState["COMMITTED"] = 2] = "COMMITTED";
    TransactionState[TransactionState["ROLLEDBACK"] = 3] = "ROLLEDBACK";
    TransactionState[TransactionState["FAILED"] = 4] = "FAILED";
})(TransactionState = exports.TransactionState || (exports.TransactionState = {}));
exports.START_TRANSACTION_IMPL = Symbol("START_TRANSACTION_IMPL");
class Transaction {
    constructor(connection, options = options_1.TransactionOptions.defaults()) {
        Object.defineProperty(this, _a, {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_connection", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_inner", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_impl", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_deferrable", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_isolation", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_readonly", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_state", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_opInProgress", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        if (!(connection instanceof client_1.StandaloneConnection)) {
            throw new errors.InterfaceError("connection is of unknown type for transaction");
        }
        this._connection = connection;
        this._deferrable = options.deferrable;
        this._isolation = options.isolation;
        this._readonly = options.readonly;
        this._state = TransactionState.NEW;
        this._opInProgress = false;
    }
    get state() {
        return this._state;
    }
    isActive() {
        return this._state === TransactionState.STARTED;
    }
    _checkStateBase(opname) {
        if (this._state === TransactionState.COMMITTED) {
            throw new errors.InterfaceError(`cannot ${opname}; the transaction is already committed`);
        }
        if (this._state === TransactionState.ROLLEDBACK) {
            throw new errors.InterfaceError(`cannot ${opname}; the transaction is already rolled back`);
        }
        if (this._state === TransactionState.FAILED) {
            throw new errors.InterfaceError(`cannot ${opname}; the transaction is in error state`);
        }
    }
    _checkState(opname) {
        if (this._state !== TransactionState.STARTED) {
            if (this._state === TransactionState.NEW) {
                throw new errors.InterfaceError(`cannot ${opname}; the transaction is not yet started`);
            }
            this._checkStateBase(opname);
        }
    }
    _makeStartQuery() {
        this._checkStateBase("start");
        if (this._state === TransactionState.STARTED) {
            throw new errors.InterfaceError("cannot start; the transaction is already started");
        }
        const isolation = this._isolation;
        let mode;
        if (this._readonly) {
            mode = "READ ONLY";
        }
        else if (this._readonly !== undefined) {
            mode = "READ WRITE";
        }
        let defer;
        if (this._deferrable) {
            defer = "DEFERRABLE";
        }
        else if (this._deferrable !== undefined) {
            defer = "NOT DEFERRABLE";
        }
        return `START TRANSACTION ISOLATION ${isolation}, ${mode}, ${defer};`;
    }
    _makeCommitQuery() {
        this._checkState("commit");
        return "COMMIT;";
    }
    _makeRollbackQuery() {
        this._checkState("rollback");
        return "ROLLBACK;";
    }
    async _execute(query, successState) {
        try {
            await this.getConn().execute(query, true);
            this._state = successState;
        }
        catch (error) {
            this._state = TransactionState.FAILED;
            throw error;
        }
    }
    start() {
        return this[exports.START_TRANSACTION_IMPL]();
    }
    async [(_a = ifaces_1.ALLOW_MODIFICATIONS, exports.START_TRANSACTION_IMPL)](singleConnect = false) {
        const start_query = this._makeStartQuery();
        if (this._opInProgress) {
            throw (0, client_1.borrowError)(ifaces_1.BorrowReason.QUERY);
        }
        this._opInProgress = true;
        try {
            const inner = this._connection[ifaces_1.INNER];
            if (inner.borrowedFor) {
                throw (0, client_1.borrowError)(ifaces_1.BorrowReason.QUERY);
            }
            inner.borrowedFor = ifaces_1.BorrowReason.TRANSACTION;
            this._inner = inner;
            this._impl = await inner.getImpl(singleConnect);
            await this._execute(start_query, TransactionState.STARTED);
        }
        finally {
            this._opInProgress = false;
        }
    }
    async commit() {
        if (this._opInProgress) {
            throw (0, client_1.borrowError)(ifaces_1.BorrowReason.QUERY);
        }
        this._opInProgress = true;
        try {
            this._inner.borrowedFor = undefined;
            await this._execute(this._makeCommitQuery(), TransactionState.COMMITTED);
        }
        finally {
            this._opInProgress = false;
        }
    }
    async rollback() {
        if (this._opInProgress) {
            throw (0, client_1.borrowError)(ifaces_1.BorrowReason.QUERY);
        }
        this._opInProgress = true;
        try {
            this._inner.borrowedFor = undefined;
            await this._execute(this._makeRollbackQuery(), TransactionState.ROLLEDBACK);
        }
        finally {
            this._opInProgress = false;
        }
    }
    getConn() {
        const conn = this._impl;
        if (!conn) {
            throw new errors.InterfaceError("Transaction is not started");
        }
        else {
            return conn;
        }
    }
    async execute(query) {
        if (this._opInProgress) {
            throw (0, client_1.borrowError)(ifaces_1.BorrowReason.QUERY);
        }
        this._opInProgress = true;
        try {
            await this.getConn().execute(query);
        }
        finally {
            this._opInProgress = false;
        }
    }
    async query(query, args) {
        if (this._opInProgress) {
            throw (0, client_1.borrowError)(ifaces_1.BorrowReason.QUERY);
        }
        this._opInProgress = true;
        try {
            return await this.getConn().fetch(query, args, false, false);
        }
        finally {
            this._opInProgress = false;
        }
    }
    async queryJSON(query, args) {
        if (this._opInProgress) {
            throw (0, client_1.borrowError)(ifaces_1.BorrowReason.QUERY);
        }
        this._opInProgress = true;
        try {
            return await this.getConn().fetch(query, args, true, false);
        }
        finally {
            this._opInProgress = false;
        }
    }
    async querySingle(query, args) {
        if (this._opInProgress) {
            throw (0, client_1.borrowError)(ifaces_1.BorrowReason.QUERY);
        }
        this._opInProgress = true;
        try {
            return await this.getConn().fetch(query, args, false, true);
        }
        finally {
            this._opInProgress = false;
        }
    }
    async querySingleJSON(query, args) {
        if (this._opInProgress) {
            throw (0, client_1.borrowError)(ifaces_1.BorrowReason.QUERY);
        }
        this._opInProgress = true;
        try {
            return await this.getConn().fetch(query, args, true, true);
        }
        finally {
            this._opInProgress = false;
        }
    }
    async queryRequiredSingle(query, args) {
        if (this._opInProgress) {
            throw (0, client_1.borrowError)(ifaces_1.BorrowReason.QUERY);
        }
        this._opInProgress = true;
        try {
            return await this.getConn().fetch(query, args, false, true, true);
        }
        finally {
            this._opInProgress = false;
        }
    }
    async queryRequiredSingleJSON(query, args) {
        if (this._opInProgress) {
            throw (0, client_1.borrowError)(ifaces_1.BorrowReason.QUERY);
        }
        this._opInProgress = true;
        try {
            return await this.getConn().fetch(query, args, true, true, true);
        }
        finally {
            this._opInProgress = false;
        }
    }
}
exports.Transaction = Transaction;
